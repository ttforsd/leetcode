
def solver(s): 
    memo = {} 
    def recur(i, j): 
        if s[i] == ")" or s[j] == "(": 
            memo[(i, j)] = False
            return False
        if i == j: 
            memo[(i, j)] = False
            return False
        if (i, j) in memo: 
            return memo[(i, j)]
        if j - i == 1 and s[i] == "(" and s[j] == ")": 
            return True 
        if j - i >= 3: 
            if recur(i + 1, j - 1) and s[i] == "(" and s[j] == ")":  
                memo[(i, j)] = True 
                return True
        if j - i >= 3: 
            for k in range(1, j - i, 2): 
                if recur(i, i + k) and recur(i + k + 1 , j): 
                    memo[(i, j)] = True
                    return True
        memo[(i, j)] = False
        return False 
    for l in range(len(s) - 1, -1, -1): 
        if l % 2 == 0: 
            continue
        for i in range((len(s) - l)): 
            if recur(i, i + l): 
                print(memo)
                return l + 1
    return 0 

s = "())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(()))((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))())())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(())((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(())))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()())))())()))((()((())())()()()(((())(((((()((((((()((()())))((((())((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(()()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(()))(())))((((()())(((((()()())(((((())(()())(()))))()(()()))()))))))())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())(()())((())())()(()())((())()())())(()())))())))(())())())(())((()())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((((()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()((())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(()((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))(()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()()()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()()))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()((())(((()((((((((())()()))())))((()())("
print(solver(s))